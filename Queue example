// однонаправленная очередь
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct zap
{
    char inf[50];            // информационное поле
    struct zap *nx;                 // адресное поле
};
void add(struct zap **, struct zap **);
void del(struct zap **, struct  zap **);
void del_any(struct zap **, struct zap **, char *);
void show(struct zap *);
void sort(struct zap **);
void ReadFromFile(struct zap **, struct zap **);
void WriteToFile(struct zap **, struct zap **);

int main()
{
    setlocale(LC_ALL, "Russian");
    struct zap *h, *t;             // указатели на голову и хвост очереди
    char l, *st;
    st = (char *)malloc(10);
    h = t = NULL;

    while (1)
    {
        puts("вид операции: 1-создать очередь (добавить в очередь)");
        puts("              2-вывод содержимого очереди");
        puts("              3-удаление элемента из очереди");
        puts("              4-удаление любого элемента из очереди");
        puts("              5-сортировка очереди");
        puts("              6-запись очереди в файл");
        puts("              7-создание очереди из файла");
        puts("              0-окончить");
        fflush(stdin);
        switch (getchar())
        {
            case '1': add(&h, &t); break;        // добавление в хвост очереди
            case '2': show(h    ); break;            // просмотр с головы очереди
            case '3': if (h) del(&h, &t); break; // удаление с головы очереди
            case '4': if (h)                     // удаление с любого места в очереди (списка)
                {
                    fflush(stdin);
                    puts("Введите информацию для удаления ");
                    gets(st);
                    del_any(&h, &t, st);
                } break;
            case '5': if (h) sort(&h); break;    // сортировка очереди (списка)
            case '6': WriteToFile(&h, &t); break;
            case '7': ReadFromFile(&h, &t); break;
            case '0': return 0;
            default: printf("Ошибка, повторите \n");
        }
    }
}

// функция создания очереди (и добавления)
// новые элементы добавляются в хвост (t) очереди
void add(struct zap **h, struct zap **t)
{
    struct zap *n;
    puts("Создание очереди \n");
    do
    {
        if (!(n = (struct zap *)calloc(1, sizeof(struct zap))))
        {
            puts("Нет свободной памяти");
            return;
        }
        puts("Введите информацию в inf");
        scanf("%s", n->inf);
        if (!*h)                         // очередь еще не создана
            *t = *h = n;                 // устанавливаем оба указателя (голова и хвост)
            // на единственный элемент очереди
        else                             // очередь уже создана
        {
            (*t)->nx = n;                // добавляем очередной элемент в хвост очереди
            *t = n;                      // передвигаем указатель на хвост
        }
        puts("Продолжить (y/n): ");
        fflush(stdin);
    } while (getchar() == 'y');
}

// функция вывода содержимого очереди
// вывод содержимого очереди от h до t
void show(struct zap *h)
{
    puts("Вывод содержимого очереди \n");
    if (!h)
    {
        puts("Очередь пуста");
        return;
    }
    do
    {
        printf("%s\n", h->inf);
        h = h->nx;        // перемещение указателя h на следующий эл-т
    } while (h);          // условие - пока не вышли за хвост очереди
    return;
}

// функция удаления элемента очереди
// удаляется элемент расположенный в голове (h) очереди
void del(struct zap **h, struct zap **t)
{
    struct zap *p;
    if (*t == *h)                    // в очереди только один элемент
    {
        free(*h);
        *t = *h = NULL;           // очередь пуста
        return;
    }
    p = (*h)->nx;
    free(*h);                        // удаление первого элемента из очереди
    *h = p;
}

// функция удаления любого элемента СПИСКА организованного
// по типу однонаправленной очереди
void del_any(struct zap **h, struct zap **t, char *st)
{
    struct zap *p, *pr;                    // указатели: на анализируемый элемент и
    // предыдущий ему элемент очереди (списка)
    if (*t == *h &&                 // если в очереди (списке) только один элемент
        (!strcmp((*h)->inf, st) || *st == '\0'))
    {
        free(*t);                   // удаление единственного элемента очереди (списка)
        *t = *h = NULL;          // очередь (список) пуста
        return;
    }
    while (*h && !strcmp((*h)->inf, st)) // удаление всех элементов st
        // с головы очереди (списка)
    {
        p = *h;               // сохраняем адрес удаляемого элемента
        *h = (*h)->nx;        // премещение указателя на голову очереди (списка)
        // на следующий элемент
        free(p);              // удаление элемента

    }
    p = (*h)->nx;             // следующий за элементом головы очереди (списка)
    pr = (*h);                // элемент очереди (списка) перед ним
    while (p)
    {
        if (!strcmp(p->inf, st)) // удаление всех элементов st
            // с головы очереди (списка)
        {
            pr->nx = p->nx;  // исключение из очереди (списка) удаляемого элемента
            free(p);         // удаление из очереди
            p = pr->nx;      // премещение головы на следующий элемент
        }
        else
        {
            p = p->nx;       // переход к новому элементу очереди (списка)
            pr = pr->nx;
        }
    }
    p = *h;
    while (p->nx) p = p->nx; // проход по новой очереди до конца
    *t = p;                  // коррекция адреса хвоста очереди (списка)
}

// функция сортировки содержимого СПИСКА организованного
// по типу однонаправленной очереди изменением указателей
void sort(struct zap **h)
{
    struct zap *s1, *s2, *s3, *s4, *hh = NULL;
    s1 = s3 = *h;                             // ссылка на голову очереди (списка)
    s4 = (struct zap *)calloc(1, sizeof(struct zap));
    for (; s1->nx; s1 = s1->nx)               // выбор исходного элемента очереди (списка)
    {
        for (s2 = s1->nx; s2; s3 = s3->nx, s2 = s2->nx) // перебор последующих за S1
        {
            if (s2 == s1->nx) s3 = s1;        // S3-элемент расположенный перед S2
            if (strcmp(s1->inf, s2->inf)>0)   // найдено новое меньшее значение
            {
                s3->nx = s2->nx;
                s2->nx = s1;                  // элемент с min становится перед S1
                s4->nx = s2;                  // S4- элемент расположенный перед S1
                s1 = s2;	                  // новый адрес S1- (после замены S1<->S2)
            }
        }
        if (!hh)
        {
            hh = s1;       // модификация текущего указателя на голову очереди (списка)
            free(s4);
        }
        s4 = s1;
    }
    *h = hh;              // возврат возможно измененного указателя на голову
    puts("Сортировка выполнена");
}

void ReadFromFile(struct zap **h, struct zap **t)
{
    struct zap *n;
    char name[30];
    FILE *f;
    puts("Создание очереди из файла\n");
    if (*h || *t) return;
    puts(" имя файла : ");
    scanf("%s",name);
    if(!(f = fopen(name,"r"))) return;
    do
    {
        if (!(n = (struct zap *)calloc(1, sizeof(struct zap))))
        {
            puts("Нет свободной памяти");
            return;
        }

        fscanf(f, "%s", n->inf);
        if(feof(f))
        {
            free(n);
            return;
        }
        if (!*h)                         // очередь еще не создана
            *t = *h = n;                 // устанавливаем оба указателя (голова и хвост)
            // на единственный элемент очереди
        else                             // очередь уже создана
        {
            (*t)->nx = n;                // добавляем очередной элемент в хвост очереди
            *t = n;                      // передвигаем указатель на хвост
        }
    } while (1);
    fclose(f);
}

void WriteToFile(struct zap **h, struct zap **t)
{
    struct zap *n;
    char name[30];
    FILE *f;
    puts("Запись очереди в файл\n");
    if (!*h || !*t) return;
    puts(" имя файла : ");
    scanf("%s", name);
    if (!(f = fopen(name, "w"))) return;
    do
    {
        fprintf(f, "%s\n", (*h)->inf);
        n=*h;                 //
        *h = (*h)->nx;
        free(n);
    } while (*h);
    *t = *h;
    fclose(f);
}
